#!/bin/sh
#
# Adam's .switch_shell
#
# Try switch shell if we're interactive, aiming for safety, but
# not so much that we end up hogging memory.
#
# $Id: .switch_shell,v 1.1 2004/07/06 12:02:44 mark Exp $
#
# Usage:
#
# . /path/to/.switch_shell [-d] [ /path/to/new_shell [ <new shell options> ]
#    -d turns on debugging

if [ "$1" = '-d' ]; then
  debug=yes
  shift
fi

myshell=
myshell_args=

if [ -n "$1" ]; then
  myshell="$1"
  shift
  myshell_args="$@"
else
  [ -e ~/.preferred_shell ] && . ~/.preferred_shell
#   # Sensible default shell to switch to.
#   myshell=`which zsh` 2>/dev/null
fi

if [ -z "$myshell" ]; then
  [ -n "$debug" ] && echo "No shell preference found; not switching shell."
  return 0
fi

# Very cute trick from Bart Schaefer which is a valid alternative approach
#eval `$myshell -f -c "echo exec $myshell" || echo :` '$myshell_args'

switch_shell_safely () {
  # we do this rather than exec() just in case $myshell fails to run.
  [ -n "$debug" ] && echo "Switching to $myshell safely ..."
  if SHELL="$myshell" "$myshell" $myshell_args; then
    [ -n "$debug" ] && echo "$myshell exited OK; exiting parent shell."
    exit
  else
    [ -n "$debug" ] && echo "$myshell had exit code $?, back to pid $$"
  fi
}

switch_shell_dangerously () {
  [ -n "$debug" ] && echo "Switching to $myshell dangerously ..."
  SHELL="$myshell" exec "$myshell" $myshell_args
}

switch_shell () {
  if [ ! -x $myshell ]; then
    [ -n "$debug" ] && echo "$myshell not executable; aborting switch."
    return
  fi

  if [ -n "$NO_SWITCH" ]; then
    [ -n "$debug" ] && echo 'Shell switching disabled by $NO_SWITCH; aborting.'
    return
  fi

  export SHELL_ARGS="$myshell_args" # no other way of retrieving these?

  [ -n "$debug" ] && echo "Switching to $myshell, args: $myshell_args"

  case "$SHLVL" in
   "") # unknown, be careful
       switch_shell_safely $myshell_args
       ;;
    1) # login shell, be careful
       switch_shell_safely $myshell_args
       ;;
    *) # other shell, be risky and save memory
       switch_shell_dangerously $myshell_args
#       switch_shell_safely $myshell_args
       ;;
  esac
}

# only switch if we're interactive
case "$-" in
  *i*) switch_shell $myshell_args
       ;;
esac

